#version 430 core

// we use the following block to define constants
// this way our IDE knows which constants to expect
// but we can still replace them
#ifndef default_consts
#define width 60
#define height 60
#endif // default_consts

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (rgba32f) uniform image2D input_texture;
layout (rgba32f) uniform image2D output_texture;

// Retrieves the state from the input texture at a given position
// and casts it to uint. If the position is out of bounds, 0 is
// returned.
uint state(ivec2 position) {
    return uint(imageLoad(input_texture, position).x);
}

// Checks if the pixel should be alive / dead in the next state according
// to the rules of the game of life.
// The rules can be found here: https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules
bool check(ivec2 pos_worker) {
    vec4 current = imageLoad(input_texture, pos_worker);
    uint neighbours =
        state(pos_worker.xy + ivec2(1, 0)) +
        state(pos_worker.xy + ivec2(0, 1)) +
        state(pos_worker.xy + ivec2(-1, 0)) +
        state(pos_worker.xy + ivec2(0, -1)) +
        state(pos_worker.xy + ivec2(1, 1)) +
        state(pos_worker.xy + ivec2(1, -1)) +
        state(pos_worker.xy + ivec2(-1, 1)) +
        state(pos_worker.xy + ivec2(-1, -1));
    return (uint(current.x) == 1) ? (neighbours >= 2 && neighbours <= 3) : (neighbours == 3);
}

void main() {
    ivec2 pos_worker = ivec2(gl_WorkGroupID.xy);
    if (check(pos_worker)) {
        imageStore(output_texture, pos_worker, vec4(1.0, 1.0, 1.0, 1.0));
    } else {
        imageStore(output_texture, pos_worker, vec4(0.0, 0.0, 0.0, 0.0));
    }
}